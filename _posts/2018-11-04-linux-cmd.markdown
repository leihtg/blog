---
layout: post
title:  "linux常用命令"
tags:  Linux
categories: Linux
author: leihtg
---

* content
{:toc}


#### 新增用户

    语法：
    useradd [-mMnr][-c <备注>][-d <登入目录>][-e <有效期限>][-f <密码缓存天数>][-g <群组>][-G <群组>][-s <shell>][-u <uid>][用户帐号]
    
    参数说明：
    -c<备注> 　加上备注文字。备注文字会保存在passwd的备注栏位中。
    -d<登入目录> 　指定用户登入时的启始目录。
    -D 　变更预设值．
    -e<有效期限> 　指定帐号的有效期限。
    -f<缓存天数> 　指定在密码过期后多少天即关闭该帐号。
    -g<群组> 　指定用户所属的群组。
    -G<群组> 　指定用户所属的附加群组,多个的话用逗号分隔
    -m 　自动建立用户的登入目录。
    -M 　不要自动建立用户的登入目录。
    -n 　取消建立以用户名称为名的群组．
    -r 　建立系统帐号。
    -s<shell>　 　指定用户登入后所使用的shell。
    -u<uid> 　指定用户ID。指定用户ID号。该值在系统中必须是唯一的。0~499默认是保留给系统用户账号使用的，所以该值必须大于499。
    
    例：
    useradd -d /home/lht -m -s /bin/bash lht



#### 删除用户

    userdel -f -r lht

#### 修改用户组别

    gpasswd -a lht sudo         

#### 使用户有sudo权限

	/etc/sudoers

#### Linux系统下Shell重复执行上条命令的 4 种方法： 

- 1、使用上方向键，并回车执行。
- 2、按 !! 并回车执行。 
- 3、输入 !-1 并回车执行。 
- 4、按 Ctrl+P 并回车执行。
#### “!”的多种用法

1. ##### 执行上一条命令

   ```
   $ whereis bash  #执行命令
   bash: /bin/bash /etc/bash.bashrc /usr/share/man/man1/bash.1.gz
    
   $ !!            #再次执行上一条命令
   whereis bash
   bash: /bin/bash /etc/bash.bashrc /usr/share/man/man1/bash.1.gz
   ```

   !!代表了上一条执行的命令。可以看到，当输入两个感叹号时，它**显示上条命令**的同时会执行上一条命令。当然了，通常我们还会想到使用“UP”键来完成这个事情。但是如果是基于上条命令扩充，!!就来得更加方便了。
   比如，你想查看某个文件，但是忘了输入more：

   ```
   $  /opt/user/test.txt  #忘记输入more
   $  more !!      #这样是不是快多了？
   ```

2. ##### 使用上条命令最后一个参数

   比如，你在使用ls列出目录内容时，没有带任何参数，但是想再次执行，带上-al参数，又不想输入长长的参数，可以使用下面的方式：

   ```
   $ ls /proc/1/task/1/net/tcp
   /proc/1/task/1/net/tc
   $ ls -al !$
   ls -al /proc/1/task/1/net/tcp
   -r--r--r-- 1 root root 0 12月 22 17:30 /proc/1/task/1/net/tcp
   ```

   这里的!$代表了上一条命令的最后一个参数。

   使用上条命令第一个参数

   而使用上条命令的第一个参数只需要使用!^，例如：

   ```
   $ ls -al !^
   ```

3. ##### 去掉最后一个参数执行上一个命令

   如果想执行上条命令，但不想带上最后一个参数：

   ```
   $ ls -al dir  #假设dir是一个很长的字符串
   $ !:-
   ls -al
   ```

   什么场景下可能会用呢？比如你上一条命令最后一个参数是一个长长的字符串，而你恰好不想不用它，并且退格键删除又慢的时候，可以使用上面的方法。

4. ##### 使用上条命令的所有参数

   前面说了使用上条命令的最后一个参数，那如果不是最后一个参数，该如何使用呢？很简单，使用!*即可。例如我们在输入find命令输错了，想要纠正的时候：

   ```
   $ fin -name "test.zip"  #这里find输错了。
   $ find !*
   find ./ -name "test.zip"
   ./workspaces/shell/find/test.zip
   ./workspaces/shell/test.zip
   ```

5. ##### 使用上条命令指定的参数

   有的读者可能会问了，如果我只想用其中某个参数呢？按照![命令名]:[参数号]的规则即可。例如：

   ```
   $ cp -rf dira dirb/   #将dira拷贝到dirb
   $ ls -l !cp:2        #查看dira的内容
   ls -l dira
   total 0
   -rw-rw-r-- 1 hyb hyb 0 12月 22 17:45 testfile
   ```

   当上条命令的参数很长，而你需要取用中间的某个参数时，效果就比较明显了。

6. ##### 执行history中的命令

   我们都知道可以通过history命令可以查看之前执行过的命令，但是如何再次执行history中的命令呢？我们可以通过“UP”键可以查看，但是历史命令很长的时候，并不是很方便，这个时候“!”便派上了用场：

   ```
   $ history
   (这里省略更多内容)
   2043  touch ./dira/testfile
    2044  cp -rf dira dirb/
    2045  ls -al dira
    2046  ls -l dira
    2047  ls -al dira
    2048  ls -l dira
    2049  ls -al dira
    2050  ls -l dira
    2051  history 
   ```

   我们可以看到，history命令出来可以看到之前执行过的命令，也会看到它前面带了一个数值。如果我们想执行前面的cp -rf dira dirb/命令，实际上只要用下面的方式即可：

   ```
   $ !2044   #2044是执行的第n条命令
   cp -rf dira dirb/
   ```

   即通过![历史命令数值]的方式执行历史命令。
   当然了，如果我们想执行倒数第二条命令，也是有方法的：

   ```
   $ !-2   #感叹号后面跟着一个负数，负几代表倒数第几条
   ```

7. ##### 按照关键字执行历史命令

   !可以根据关键字执行命令。

   执行上一条以关键字开头的命令

   例如，执行上一条find命令：

   ```
   $ !find    #执行上条以find开头的命令
   ```

   

   执行上一条包含关键字的命令

   再例如，执行上一条包含name的命令：

   ```
   $ find ./ -name "test"
   ./test
   ./find/test
   $ !?name?
   find ./ -name "test"
   ./test
   ./find/test
   
   ```

8. ##### 替换上条命令的参数

   例如：

   ```
   $ find ./ -name "old*" -a -name "*.zip"
   ```

   如果我们需要将这条命令中的old更换为new：

   ```
   !!:gs/old/new
   ```

9. ##### 逻辑非的作用

   这个是它最为人所熟悉的作用，例如删除除了cfg结尾以外的所有文件：

   ```
   rm !(*.cfg)  #删除需谨慎
   ```

   



#### 查看系统参数

1. 查看cpu信息
   
        lscpu 或 cat /proc/cpuinfo 
    
2. 查看cpu位数

        getconf LONG_BIT
    
3. 查看MEM信息

        free
        free -m
        cat /proc/meminfo
    
4. 查看系统内核版本

        uname -a
        uname -r
        more /etc/*release
        more /etc/issue
        more /proc/version        
    
5. 查看磁盘信息

        lsblk
        fdisk -l
        df -k        
    
6. 查看网络信息

        cat /etc/sysconfig/network-scripts/ifcfg-eth0
        cat /etc/sysconfig/network-scripts/ifcfg-l0
        ifconfig
        查看网络带宽：
        ethtool eth0，查看SPEED参数        